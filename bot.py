import requests
from time import sleep
from mistralai import Mistral
from langdetect import detect

# ==== üîë –í—Å—Ç–∞–≤—å —Å–≤–æ–∏ –∫–ª—é—á–∏ ====
TELEGRAM_BOT_TOKEN = "8383958081:AAHCdEr-K_TuO7JKXjE8bEr-FvoemWZOKQ4"
MISTRAL_API_KEY = "57EalUtv5CCfN7FJSm0IkFG0Ki5xaJXi"

# ==== –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ====
mistral = Mistral(api_key=MISTRAL_API_KEY)
URL = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}"
offset = 0

print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ù–∞–ø–∏—à–∏ –µ–º—É –≤ Telegram!")

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 5 —Å–æ–æ–±—â–µ–Ω–∏–π –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_history = {}

def get_updates():
    global offset
    response = requests.get(URL + "/getUpdates", params={"offset": offset, "timeout": 30})
    data = response.json()
    return data.get("result", [])

def send_message(chat_id, text):
    requests.post(URL + "/sendMessage", data={"chat_id": chat_id, "text": text})

while True:
    updates = get_updates()
    for update in updates:
        offset = update["update_id"] + 1

        if "message" in update and "text" in update["message"]:
            chat_id = update["message"]["chat"]["id"]
            user_text = update["message"]["text"].strip()

            # –§–∏–∫—Å–∏—Ä—É–µ–º —è–∑—ã–∫ –Ω–∞ —Ä—É—Å—Å–∫–∏–π
            lang = "ru"

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if chat_id not in user_history:
                user_history[chat_id] = []

            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
            user_history[chat_id].append(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_text}")
            if len(user_history[chat_id]) > 5:
                user_history[chat_id] = user_history[chat_id][-5:]

            # Prompt –¥–ª—è –úistral
            system_prompt = (
                f"–¢—ã ‚Äî –¥–æ–±—Ä—ã–π, —ç–º–ø–∞—Ç–∏—á–Ω—ã–π –ø—Å–∏—Ö–æ–ª–æ–≥. "
                f"–û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. "
                f"–ò—Å–ø–æ–ª—å–∑—É–π –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Ç–µ—Ö–Ω–∏–∫–∏, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –±—ã–ª–æ –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ: "
                f"–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–π —á—É–≤—Å—Ç–≤–∞, –∑–∞–¥–∞–≤–∞–π –º—è–≥–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã, –¥–∞–≤–∞–π –ª—ë–≥–∫–∏–µ –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–µ —Å–æ–≤–µ—Ç—ã. "
                f"–°–æ—Ö—Ä–∞–Ω—è–π –æ—Ç–≤–µ—Ç—ã –∫–æ—Ä–æ—Ç–∫–∏–º–∏, —Ç—ë–ø–ª—ã–º–∏ –∏ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏.\n\n"
                f"–ò—Å—Ç–æ—Ä–∏—è –±–µ—Å–µ–¥—ã:\n" + "\n".join(user_history[chat_id])
            )

            try:
                response = mistral.chat.complete(
                    model="mistral-large-latest",
                    messages=[
                        {"role": "system", "content": system_prompt},
                        {"role": "user", "content": user_text}
                    ]
                )

                reply = response.choices[0].message.content.strip()
                send_message(chat_id, reply)

                # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ò–ò –≤ –∏—Å—Ç–æ—Ä–∏—é
                user_history[chat_id].append(f"–ë–æ—Ç: {reply}")
                if len(user_history[chat_id]) > 5:
                    user_history[chat_id] = user_history[chat_id][-5:]

            except Exception as e:
                print("‚ö†Ô∏è –û—à–∏–±–∫–∞:", e)
                send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ –ò–ò. –ü—Ä–æ–≤–µ—Ä—å API –∫–ª—é—á.")

    sleep(2)
